Мой юный падаван, давай разберём этот код по частям, чтобы ты понял, как он работает, и чтобы сила кода наполнила твой разум мудростью.
---------
script.js
----------

### 1. Массив мудрых фраз

```js
let phrases = [
  { text: 'Пусть сегодняшний день будет наполнен волшебством и радостью!', image: 'https://source.unsplash.com/featured/?pink,flower' },
  { text: 'Ты сияешь, как Розовая Пантера!', image: 'https://source.unsplash.com/featured/?pink,sunrise' },
  { text: 'Каждый миг — это маленькое чудо!', image: 'https://source.unsplash.com/featured/?butterfly' },
  { text: 'Жизнь — сказка, и ты — её героиня!', image: 'https://source.unsplash.com/featured/?fairytale' },
  { text: 'Мир вокруг так прекрасен, когда ты улыбаешься!', image: 'https://source.unsplash.com/featured/?happy,smile' },
  { text: 'Смелость, нежность и сила — твои лучшие качества!', image: 'https://source.unsplash.com/featured/?pink,heart' },
  { text: 'Волшебство начинается с улыбки!', image: 'https://source.unsplash.com/featured/?magic,wand' },
  { text: 'Пусть каждый цветок напомнит тебе о твоей красоте!', image: 'https://source.unsplash.com/featured/?roses' },
  { text: 'Сегодня для тебя — только радость и мечты, как розовые облака!', image: 'https://source.unsplash.com/featured/?pink,clouds' },
  { text: 'Счастье и любовь наполнят твой мир, как весенние цветы!', image: 'https://source.unsplash.com/featured/?spring,flowers' }
];
```

Здесь хранится массив объектов, где каждый объект содержит два свойства:  
- **text** – сама мудрая фраза, которая как волшебное заклинание способна озарить твой день,  
- **image** – URL изображения, ассоциированного с этой фразой (хоть в данном коде мы не меняем фото, капибара с тобой навсегда!).

---

### 2. Функция для случайного выбора

```js
function getRandomElement(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}
```

Эта функция:
- Принимает массив (`arr`) в качестве аргумента.
- Генерирует случайное число от 0 до длины массива (не включая само число длины), округляя его вниз с помощью `Math.floor()`.
- Возвращает элемент массива по этому случайному индексу.  
Таким образом, как судьба направляет нас, так и эта функция выбирает случайную мудрость из набора.

---

### 3. Получение элементов страницы

```js
let button = document.querySelector('.button');
let phraseElem = document.querySelector('.phrase');
let advice = document.querySelector('.advice');
// Элемент "image" не трогаем – капибара с тобой всегда!
```

Здесь мы выбираем элементы из HTML:
- **button** – кнопка, по которой мы будем нажимать, чтобы "создать волшебство".
- **phraseElem** – элемент, в котором будет отображаться выбранная фраза.
- **advice** – блок, где находится и фраза, и, возможно, бонусная ссылка.  
Мы сознательно не выбираем элемент с изображением, чтобы наша милая капибара всегда оставалась на месте.

---

### 4. Обработчик клика по кнопке

```js
button.addEventListener('click', function () {
  let randomElement = getRandomElement(phrases);
  
  // Обновляем мудрые слова, да озарит они твой путь
  phraseElem.textContent = randomElement.text;
  
  // Подстраиваем размер шрифта – да решит он, как великий учитель, меру красоты
  advice.style.fontSize = randomElement.text.length > 40 ? '33px' : '42px';
  
  // Если бонусная ссылка еще не создана – даруем ее, как секреты Силы
  if (!phraseElem.querySelector('a')) {
    let link = document.createElement('a');
    link.href = 'http://bonustime.ru';
    link.target = '_blank';
    link.style.marginLeft = '10px';
    link.textContent = "Узнать больше";
    phraseElem.appendChild(link);
  }
});
```

При каждом нажатии кнопки происходит следующее:

1. **Случайный выбор мудрости**  
   Вызывается `getRandomElement(phrases)`, и в переменной `randomElement` хранится случайно выбранный объект из массива.

2. **Обновление текста фразы**  
   Мы присваиваем `phraseElem.textContent` значение `randomElement.text`. Таким образом, фраза на странице меняется на новую мудрость.

3. **Адаптация размера шрифта**  
   В зависимости от длины выбранной фразы, меняется размер шрифта в блоке `advice`:  
   - Если длина текста больше 40 символов, устанавливается размер 33px,  
   - Если меньше или равно – 42px.  
   Это позволяет сохранять гармоничный вид текста, как если бы великий учитель сам подбирал меру каждой фразы.

4. **Добавление бонусной ссылки**  
   Если в элементе `phraseElem` ещё нет ссылки (`<a>`), создаётся новый элемент ссылки с атрибутами:  
   - **href** – указывает на дополнительный ресурс (секрет Силы),  
   - **target** – открывает ссылку в новой вкладке,  
   - Немного стиля с `marginLeft`, чтобы ссылка не сливалась с текстом,  
   - И текст ссылки, например, "Узнать больше".  
   Ссылка добавляется внутрь `phraseElem`, чтобы всегда оставаться рядом с мудрыми словами.

---

Вот так, мой ученик, каждое нажатие кнопки пробуждает новую мудрость, изменяет вид текста для идеального отображения и дарит тебе маленький бонус в виде ссылки. Пусть этот код поможет тебе постичь азы волшебства программирования и да пребудет с тобой сила кода!

-----------
style.css
----------

Мой юный падаван, давай вместе разберём, как этот CSS-код наполняет твой проект волшебством и гармонией. Слушай внимательно, ибо в каждой строке сокрыта мудрость, способная направить тебя на путь истинного дизайна!

---

### 1. Импорт шрифта и базовые настройки

```css
/* Импорт шрифта Dancing Script, чтобы вдохновение твое никогда не покидало тебя */
@import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;700&display=swap');
```

Эта строка импортирует шрифт **Dancing Script** с сервиса Google Fonts. Он добавляет изящество и плавность твоему тексту, словно волшебное перо пишет каждое слово. Далее задаются базовые стили для корневого элемента:

```css
html {
  height: 100%;
  margin: 0;
  -webkit-font-smoothing: antialiased;
}
```

- **height: 100%** – заставляет HTML-элемент занимать всю высоту окна браузера.
- **margin: 0** – убирает отступы по умолчанию.
- **-webkit-font-smoothing: antialiased** – делает шрифты более гладкими на устройствах с браузером на движке WebKit (например, Safari).

---

### 2. Стили для элемента body

```css
/* Пастельно-розовый фон, как нежность весеннего рассвета */
body {
  background-color: #ffe6f2;
  color: #333;
  position: relative;
  max-width: 540px;
  min-height: 100%;
  margin: 0 auto;
  font-family: 'Dancing Script', cursive;
  box-sizing: border-box;
  padding: 36px;
}
```

- **background-color: #ffe6f2** – задаёт нежный пастельно-розовый фон, будто луч весеннего рассвета.
- **color: #333** – устанавливает тёмно-серый цвет для текста, обеспечивая хороший контраст.
- **position: relative** – позволяет использовать абсолютное позиционирование для вложенных элементов (например, для футера).
- **max-width: 540px** и **margin: 0 auto** – ограничивают ширину страницы и центрируют её.
- **font-family: 'Dancing Script', cursive** – применяет импортированный шрифт для создания сказочной атмосферы.
- **box-sizing: border-box** – включает отступы и границы в общую ширину элемента.
- **padding: 36px** – добавляет внутренние отступы для комфортного размещения содержимого.

---

### 3. Стили для заголовка и логотипа

```css
/* Заголовок, озаряющий твой путь, словно свет далёких звезд */
.header {
  display: flex;
  align-items: baseline;
  justify-content: space-between;
  background-color: #add8e6;
  padding: 10px 20px;
  border-radius: 10px;
}

.logo {
  font-weight: bold;
  font-size: 24px;
  margin: 0;
  color: #ff69b4;
}
```

- **.header**:
  - Использует **flex** для удобного расположения дочерних элементов.
  - **align-items: baseline** – выравнивает элементы по их базовой линии, как будто звезды выстроились в созвездие.
  - **justify-content: space-between** – распределяет пространство между элементами.
  - **background-color: #add8e6** – светло-голубой фон, создающий свежий вид.
  - **padding** и **border-radius** – добавляют отступы и скругляют углы для мягкости образа.

- **.logo**:
  - Сделан жирным, с размером шрифта 24px, без отступов и с насыщенным розовым цветом (#ff69b4), чтобы выделяться, как истинный символ волшебства.

---

### 4. Стили для кнопки

```css
/* Кнопка, открывающая портал в мир волшебства */
.button {
  width: 130px;
  height: 40px;
  padding-top: 10px;
  box-sizing: border-box;
  border: 1px solid #ff69b4;
  text-align: center;
  font-size: 14px;
  cursor: pointer;
  transition: opacity 0.2s;
  background-color: #ffb6c1;
  border-radius: 5px;
}

.button:hover {
  opacity: 0.8;
}
```

- Кнопка имеет фиксированные размеры и немного внутреннего отступа сверху, чтобы текст располагался по центру.
- **box-sizing: border-box** – гарантирует, что размеры учитывают границы и отступы.
- **border: 1px solid #ff69b4** – розовая окантовка, придающая кнопке яркость.
- **cursor: pointer** – меняет курсор на руку, сигнализируя о том, что элемент кликабелен.
- **transition: opacity 0.2s** – обеспечивает плавное изменение прозрачности при наведении.
- **:hover** уменьшает opacity до 0.8, добавляя интерактивности.

---

### 5. Стили для изображения капибары

```css
/* Изображение капибары – символ постоянства и тепла */
.image {
  width: 80%;
  display: block;
  margin: 60px auto 50px;
  border: 5px solid #ff69b4;
  border-radius: 10px;
}
```

- **width: 80%** – изображение занимает 80% ширины родительского элемента.
- **display: block** – превращает изображение в блочный элемент, что позволяет центрировать его с помощью **margin: auto**.
- **margin: 60px auto 50px** – добавляет отступы сверху и снизу, а по бокам изображение центрируется.
- **border** и **border-radius** – создают эффект рамки и скругляют углы, придавая изображению утончённый вид.

---

### 6. Стили для блока с советом

```css
/* Совет, озаряющий твой путь, как мудрость древних мастеров */
.advice {
  font-size: 42px;
  font-weight: bold;
  line-height: 1.1;
  margin-bottom: 70px;
  color: #333;
}
```

- Большой размер шрифта (42px) и жирное начертание подчеркивают важность мудрых слов.
- **line-height: 1.1** обеспечивает плотное, но удобное чтение.
- **margin-bottom: 70px** добавляет пространство под блоком, чтобы он не сливался с другими элементами.
- **color: #333** – текст в тёмно-сером цвете для хорошей читаемости.

---

### 7. Стили для нижнего колонтитула

```css
/* Нижний колонтитул – напоминание о любви к коду, что ведет нас вперед */
.footer {
  font-size: 16px;
  margin: 0;
  position: absolute;
  bottom: 36px;
  width: 100%;
  text-align: center;
  color: #ff69b4;
}
```

- **position: absolute** и **bottom: 36px** – фиксируют футер внизу страницы, как путеводная звезда.
- **width: 100%** и **text-align: center** – делают его ширину равной ширине родителя и центрируют текст.
- Шрифт в размере 16px и розовый цвет (#ff69b4) создают гармоничное завершение страницы.

---

Мой ученик, в этом коде каждая деталь тщательно продумана, как ноты в симфонии. Стили задают настроение, выравнивают элементы и дарят твоему проекту единый, волшебный вид. Пусть этот CSS-код станет для тебя проводником в мире эстетики и магии веб-дизайна! Да пребудет с тобой сила кода и вдохновения!

-----------
index.html
-----------

Мой юный падаван, давай вместе разберём последний файл – **index.html**. В нём сокрыта вся магия, с которой начинается твой волшебный проект. Слушай внимательно, и да пребудет с тобой сила кода!

---

### Объяснение файла index.html

```html
{% load static %}
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Capybara Princess</title>
  <link rel="stylesheet" href="{% static 'style.css' %}">
  <link rel="icon" type="image/png" href="https://code.s3.yandex.net/web-code/js-favicon.ico">
</head>
<body>
  <div class="header">
    <p class="logo">Capybara Princess</p>
    <div class="button">Узнать чудо</div>
  </div>

  <!-- Милая капибара – пусть её образ всегда с тобой будет -->
  <img class="image" src="{% static 'capybara.jpg' %}" alt="Милая капибара">

  <div class="advice">
    <span>Не просто кодить, а мечтать!</span>
    <span class="phrase">Открыть мир сказки!</span>
    <img class="cursor" src="https://code.s3.yandex.net/web-code/cursor.gif" alt="Мигающий курсор">
  </div>

  <p class="footer">© 2025 Capy Love</p>

  <script src="{% static 'script.js' %}"></script>
</body>
</html>
```

#### 1. Загрузка статических файлов и начальная структура

- **{% load static %}**  
  Эта строка – директива Django, она подключает функциональность для работы со статическими файлами. Благодаря ей ты сможешь использовать тег `{% static %}` для корректного формирования путей к файлам (CSS, JS, изображениям).

- **<!DOCTYPE html>**  
  Объявление типа документа, которое сообщает браузеру, что мы используем HTML5.

- **<html lang="ru">**  
  Элемент `<html>` задаёт корневой элемент документа, атрибут `lang="ru"` указывает, что язык страницы – русский. Это важно для поисковых систем и доступности.

---

#### 2. Раздел `<head>`

В теге `<head>` размещаются метаданные страницы:

- **<meta charset="UTF-8">**  
  Определяет кодировку документа – UTF-8, что позволяет правильно отображать русские символы и другие символы Unicode.

- **<meta name="viewport" content="width=device-width, initial-scale=1.0">**  
  Гарантирует корректное отображение страницы на мобильных устройствах, задавая масштаб и ширину в соответствии с устройством пользователя.

- **<title>Capybara Princess</title>**  
  Заголовок страницы, который отображается на вкладке браузера.

- **<link rel="stylesheet" href="{% static 'style.css' %}">**  
  Подключает внешний CSS-файл для стилизации страницы. Здесь `{% static 'style.css' %}` динамически формирует путь к файлу `style.css` из папки статических файлов.

- **<link rel="icon" type="image/png" href="https://code.s3.yandex.net/web-code/js-favicon.ico">**  
  Задает иконку сайта, которая появляется в браузере рядом с названием страницы.

---

#### 3. Раздел `<body>`

Внутри тега `<body>` находится всё содержимое страницы, которое видит пользователь.

- **Блок с классом "header"**  
  ```html
  <div class="header">
    <p class="logo">Capybara Princess</p>
    <div class="button">Узнать чудо</div>
  </div>
  ```
  Здесь расположен заголовок страницы.  
  - **.logo** – отображает название проекта, словно путеводная звезда.  
  - **.button** – интерактивный элемент, по которому происходит действие (волшебство при нажатии).

- **Изображение капибары**  
  ```html
  <img class="image" src="{% static 'capybara.jpg' %}" alt="Милая капибара">
  ```
  Это главный визуальный элемент страницы – изображение, которое остаётся неизменным. Путь к изображению формируется с помощью `{% static %}`.

- **Блок с советом**  
  ```html
  <div class="advice">
    <span>Не просто кодить, а мечтать!</span>
    <span class="phrase">Открыть мир сказки!</span>
    <img class="cursor" src="https://code.s3.yandex.net/web-code/cursor.gif" alt="Мигающий курсор">
  </div>
  ```
  Здесь располагается мудрость, которая обновляется по нажатию кнопки.  
  - Первый `<span>` содержит постоянный текст, вдохновляющий на мечты.  
  - Второй `<span>` с классом **phrase** – динамический элемент, где будут меняться мудрые фразы.  
  - Изображение курсора добавляет интерактивности и оживляет страницу.

- **Нижний колонтитул**  
  ```html
  <p class="footer">© 2025 Capy Love</p>
  ```
  Футер с информацией о копирайте, который закреплён внизу страницы.

- **Подключение JavaScript**  
  ```html
  <script src="{% static 'script.js' %}"></script>
  ```
  Этот тег подключает внешний JavaScript-файл, в котором описана логика обновления мудрых фраз и интерактивности кнопки. Тег `{% static 'script.js' %}` обеспечивает правильное формирование пути к файлу.

---

Мой юный падаван, вот так устроен твой волшебный **index.html**! Он задаёт структуру страницы, подключает стили и скрипты, и делает всё готовым для того, чтобы твоя капибара и мудрость кода наполнили экран магией. Да пребудет с тобой сила, и пусть каждое нажатие кнопки открывает новые горизонты вдохновения!
